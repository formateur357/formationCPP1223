Exercice 1 : Gestion Avancée de Conteneurs avec auto et enum class

Objectif :

- Utiliser enum class pour définir un type énuméré représentant différents types de fruits. Ensuite, créer un std::map pour stocker le prix de chaque fruit et utiliser des boucles basées sur un intervalle avec le mot-clé auto pour itérer sur le map.

Enoncé :

- Définissez un enum class nommé Fruit avec au moins trois fruits différents (par exemple, Pomme, Banane, Orange).
- Créez un std::map<Fruit, double> pour stocker le prix de chaque fruit.
- Remplissez le map avec des valeurs pour chaque fruit.
- Utilisez une boucle basée sur un intervalle et le mot-clé auto pour imprimer le nom et le prix de chaque fruit.

Point Bonus :

- Ajoutez une fonction lambda pour appliquer une réduction de 10% sur tous les fruits et mettez à jour les prix dans le map.

--------------------------------------------------------------------------------------------------------------------------------
Exercice 2 : Utilisation de std::tuple et constexpr

Objectif :

- Créer un std::tuple pour représenter les informations d'un livre (titre, auteur, nombre de pages) et utiliser une fonction constexpr pour calculer un aspect du livre (par exemple, le rapport texte/page).

Enoncé :

- Définissez un std::tuple pour stocker les informations d'un livre : titre (chaîne de caractères), auteur (chaîne de caractères) et nombre de pages (entier).
- Créez une fonction constexpr nommée textDensity qui prend le nombre de pages et le nombre total de mots (entier) et calcule la densité de texte par page.
- Initialisez un std::tuple avec des informations de livre spécifiques.
- Utilisez la fonction textDensity pour calculer et afficher la densité de texte du livre.

// Point Bonus :

- Ajoutez des interactions avec l'utilisateur pour permettre la saisie des informations du livre et du nombre total de mots, puis affichez le résultat de la densité de texte.

-------------------------------------------------------------------------------------------------------

Exercice 3 : Bibliothèque de Livres avec Gestion Avancée des Classes

Objectif :

- Développer une petite application de bibliothèque de livres qui utilise constexpr pour des calculs constants à la compilation, des littérales définies par l'utilisateur pour manipuler des données, et les mots-clés override et final pour gérer l'héritage de classes.

Enoncé :

Définir une Classe de Base Livre:

- La classe Livre doit avoir des membres pour le titre (string), l'auteur (string), et le nombre de pages (int).
- Inclure un constructeur approprié et des méthodes pour accéder à ces attributs.

Classe Dérivée LivreAvecRésumé:

- Créez une classe dérivée LivreAvecRésumé qui hérite de Livre et ajoute un résumé (string) comme attribut supplémentaire.
- Override la méthode d'accès au titre pour y ajouter un suffixe "(avec résumé)".

Utilisation de constexpr pour le Calcul des Coûts:

- Définissez une fonction constexpr nommée calculCout qui calcule le coût d'un livre en fonction du nombre de pages (par exemple, coût par page).

Littérales Définies par l'Utilisateur pour le Nombre de Pages:

- Définissez une littérale utilisateur pour les pages, permettant d'écrire par exemple 150_p pour dénoter 150 pages.

Utilisation des Mots-clés override et final:

- Assurez-vous que les méthodes appropriées dans LivreAvecRésumé utilisent le mot-clé override.
- Marquez la classe LivreAvecRésumé comme final.

Point Bonus :

- Ajoutez une interaction utilisateur pour créer un objet Livre ou LivreAvecRésumé, affichez les détails du livre, y compris le coût calculé.